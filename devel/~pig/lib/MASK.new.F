\ Cравнение строки и маски, содержащей метасимволы (wildcards)  * ?

\ ver 0.4
\ 18.03.2000
\ исправлена некорректная обработка случая  S" aaa" S" aaa*"
\ ver 0.5
\ переход к locals,  небольшое улучшение алгоритма. (  для Eserv2* - temps.f оставлены)
\ ver 0.6  13.05.2000  добавлена возможность квотить метасимволы:  \* \? \\
\ ver 0.7  04.04.2004 (~pig):
\          - версия, использующая сравнение с ограничением - если поиск совпадений слишком
\            затягивается (сложный шаблон и объёмная строка), сравнение прерывается
\            с выдачей кода несовпадения
\          - небольшая оптимизация алгоритма
\          - корректная обработка случая нескольких подряд звёздочек в конце шаблона
\          - добавлено квотирование кавычек с использованием символа-заменителя
\            (кавычки в шаблоне напрямую использовать не всегда возможно из-за особенностей
\            обработки текстовых списков, в которых кавычки являются ограничителями строк)

\ for SPF
\ ver 0.1 - 11.06.1999    
\ (c) Ruvim Pinka


\ REQUIRE ||  ~pinka/lib/temps.txt 
REQUIRE { ~ac/lib/locals.f

\ Дополнительные переменные
100000000 VALUE vWCMPLimit			\ ограничитель цикла поиска совпадений (default)
USER-VALUE uWCMPLimit				\ ограничитель цикла поиска совпадений (на текущий вызов)
USER uWCMPCount					\ счетчик цикла
CHAR \ VALUE quote-char				\ префикс квотирования

: WITHIN ( n1|u1 n2|u2 n3|u3 -- flag ) \ 93 CORE EXT
  OVER - >R - R> U<
;

\ возвращает верхний регистр символа ( только для основного набора)
: UpCase ( c1 -- c2 )
  DUP [CHAR] a [ CHAR z 1+ ] LITERAL WITHIN
  IF 32 - THEN
;

\ макросы
: wc+
  S" wc 1+ -> wc wclen 1- -> wclen" EVALUATE
; IMMEDIATE
: str+
  S" str 1+ -> str strlen 1- -> strlen" EVALUATE
; IMMEDIATE

\ основной цикл (общее для двух функций ядро)
: (WildCMP-UL) ( addr1 u1 addr2 u2 -- n )
  { str strlen wc wclen }
\ || str strlen wc wclen ||  (( str strlen wc wclen ))

  BEGIN
    wclen 1 <					\ шаблон закончился?
    IF
      strlen 1 <				\ да - а строка?
      IF 0 ELSE -1 THEN				\ код возврата
      EXIT					\ закончить
    THEN
    wc C@ wc+					\ очередной символ шаблона
    DUP [CHAR] * =				\ звездочка?
    IF
      DROP					\ да - копию символа убрать
      wclen 1 <					\ шаблон закончился?
      IF 0 EXIT THEN				\ да - выход со сравнением
      BEGIN					\ попробуем сравнить оставшиеся части
        str strlen wc wclen RECURSE 0=		\ рекурсия - сравнение от текущей позиции
        IF 0 EXIT THEN				\ нашли совпадение
        strlen 1 <				\ строка закончилась?
        IF -1 EXIT THEN				\ да - выход с несравнением
        uWCMPLimit				\ используется нечёткий режим?
        IF
          uWCMPCount 1+!			\ да - нарастить счётчик цикла
          uWCMPCount @ uWCMPLimit U>		\ предел поиска превышен?
          IF -2 EXIT THEN			\ да - выход с несравнением
        THEN
        str+					\ пропустим символ в строке (обрабатывается *)
      AGAIN
    THEN
    strlen 1 <					\ строка закончилась?
    IF DROP -1 EXIT THEN			\ да - выход с несравнением
    DUP [CHAR] ? <>				\ знак вопроса?
    IF
      DUP quote-char = wclen 0 > AND		\ нет - символ квотирования, и шаблон не кончился?
      IF
        DROP					\ да - копию символа убрать
        wc C@ wc+				\ квотируемый символ
        DUP [CHAR] q =				\ "заместитель" кавычек?
        IF
          DROP					\ да - копию символа убрать
          [CHAR] "				\ сами кавычки
        THEN
      THEN
      UpCase					\ перевести в верхний регистр
      str C@ UpCase				\ текущий символ строки - тоже в верхний регистр
      2DUP <>					\ несовпадение?
      IF
        > IF -1 ELSE 1 THEN			\ знак несовпадения
        EXIT					\ и выход
      THEN
      DROP					\ лишнее со стека снять
    THEN
    DROP					\ лишнее со стека снять
    str+					\ пропустить совпавший символ
  AGAIN
;

\ точки входа
\ Общая семантика: WildCMP-U(Lim) ( addr1 u1 addr2 u2 -- n )
\  addr1 u1  - строка
\  addr2 u2  - маска ( шаблон)
\  n =  0,  если строка подходит под шаблон;
\  n = -2,  если сравнение прервано по превышению лимита циклического перебора;
\  n = -1,  - если несовпадающий символ НЕ найден, но строки разной длины;
\           - если он найден, причем первый несовпадающий символ
\           строки имеет меньшее числовое значение, чем соответсвующий
\           символ маски;
\  n =  1   в остальных случаях, т.е. если первый несовпадающий символ
\           строки имеет большее числовое значение, чем соответсвующий
\           символ маски;
\  Маска :
\           *  - любое количество любых символов
\           ?  - любой символ
\           \  - префикс "квотирования" специальных символов:
\                \\ -> \
\                \* -> *
\                \? -> ?
\                \q -> " (обход особости кавычек в текстовых списках)
\

\ Полное сравнение
: WildCMP-U ( addr1 u1 addr2 u2 -- n )
  0 TO uWCMPLimit				\ никакого ограничения нет
  (WildCMP-UL)					\ выполнить собственно сравнение
;

\ Сравнение с ограничением числа итераций
: WildCMP-ULim ( addr1 u1 addr2 u2 -- n )
  vWCMPLimit TO uWCMPLimit			\ установить ограничение
  uWCMPCount 0!					\ сброс счётчика циклов
  (WildCMP-UL)					\ выполнить собственно сравнение
;
