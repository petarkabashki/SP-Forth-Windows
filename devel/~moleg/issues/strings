\ 19-03-2007 ~mOleg
\ Copyright [C] 2006 mOleg mininoleg@yahoo.com
\ Строки в Форте и в СПФ в частности.

     Существует  два  общеизвестных типа представления строк. Это, так
называемые, asciiz строки и строки паскалевского типа.

[#][string body] - так выглядит строка паскалевского типа.
[string body][0] - так выглядит asciiz строка.

где # - счетчик длины строки,
  а 0 - тот самый Z ограничитель конца строки.

     У  каждого  из  указанных  типов  строк  есть преимущества и есть
недостатки.

     Основным   недостатком   у   строк  паскалевского  типа  является
ограничение  по длинне строки, равное 255 байтам( сама же строка может
занимать 256). Основным преимуществом является возможность моментально
определить  длинну  строки.  У  asciiz  строк  преимуществом  является
неограниченность  длинны  строки,  а к недостаткам можно отнести очень
медленную  работу с такими строками и невозможность содержать 0 внутри
такой строки. И те и другие строки занимают в пространстве памяти одно
и  то же пространство и для работы с такими строками достаточно только
одной ссылки на них.

     Наиболее  распространенные  языки  программирования  кроме такого
представления   строк   не   знают   ничего.  Более  того,  наибольшее
распространение получили asciiz, самый неудобный тип строк.

     У форта все из покона веков выглядит немного не так, как у других
языков.  Возможность  возвращать  из  функции  произвольное количество
параметров   позволяет  делать  чуточку  меньше  работы,  оперируя  со
строками  при  помощи  адреса  и длинны строки в явном виде, например,
слово  TYPE  (выводящее  содержимое  строки  на  экран)  получает  два
параметра  asc  #  -  адрес  строки и ее длинну. То есть имеется еще и
промежуточное  представление  строк.  Поэтому  часто  можно  встретить
последовательность  COUNT  TYPE  или  ASCIIZ>  TYPE  -  в одном случае
печатается содержимое строки паскалевского типа, то есть со счетчиком,
а в другом случае содержимое asciiz строки.

     В памяти строки хранить удобнее всего в виде строки со счетчиком.
При   обращении   к  API  функциям  приходится  работать  со  строками
завершаемыми  нулем. Поэтому необходимо уметь конвертировать строку из
одного   типа  в  другой.  В  первое  время  форт  содержал  несколько
примитивов для этого:

>ASCIIZ - слово копировало строку куда-то в буфер и дописывало в конец
          0 либо же сдвигало всю строку на один символ влево, и нуль в
          конец.

ASCIIZ> - слово   преобразовывало   строку  из   asciiz  во  внутренне
          представление,  то  есть  к адресу строки добавлялся счетчик
          длинны строки, для чего требовалось посчитать длинну строки.

     Все  бы  хорошо,  да получается медленно. Удобнее и быстрее всего
работать  со  строками,  когда  и  адрес  начала и длинна строки сразу
известны,  то  есть  так, как это делает TYPE. В памяти строки хранить
удобно  в  виде  пасклевских  строк,  а обращаться во вне необходимо с
нулем  завершенными строками. И тогда решли, а почему бы не попытаться
скомбинировать  несколько  типов строк, то есть иметь дело не с asciiz
строками и не с паскалевскими, а с их гибридом:

 [#][string body][0]

     и  хранить  этот  самый  гибрид  в памяти, а со строками работать
наиболее  удобным образом, то есть таким, когда явно заданы и начало и
размер строки, что и сделано в СПФ.

     для  того  чтобы перевести паскалевского типа строку во внутренне
представление нужно использовать, как и ранее COUNT

     для того, чтобы преобразовать строку из внутреннего представления
в  asciiz  строку  достаточно удалить всего один верхний параметр - то
есть сделать DROP

     ну,  а работать с получаемыми извне asciiz строками таки придется
по-старинке с помощью слова ASCIIZ>
