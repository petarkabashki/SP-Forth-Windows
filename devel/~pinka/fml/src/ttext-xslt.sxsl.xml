<?xml version="1.0" encoding="ASCII" ?>
<xi:include
  xmlns:xi="http://forth.org.ru/2006/XML/Struct"
  xmlns="http://forth.org.ru/2006/SXSL/"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>
<!-- Dec.2006, Apr.2007 ruvim@forth.org.ru -->

<def name="stop-error-nesting">
  <xsl:message terminate = "yes">
    <xsl:text>Unsupported nesting, error in context of: </xsl:text>
    <xsl:if test=" . instance of node()"><!-- XPath 2.0 -->
    <xsl:for-each select="ancestor-or-self::*">
      <xsl:text>/</xsl:text><xsl:value-of select="name()" />
    </xsl:for-each>
    </xsl:if>
    <xsl:text>, $state=</xsl:text><xsl:value-of select="$state" /><xsl:text>, content: </xsl:text>
    <xsl:copy-of select="." />
  </xsl:message>
</def>


<var name="state" select="0" /><!-- has a dynamic binding -->

<def name="assure-state"><!-- or, ensure -->
  <xsl:if test="$state = 0"><stop-error-nesting/></xsl:if>
</def>
<def name="assure-state0">
  <xsl:if test="not($state = 0)"><stop-error-nesting/></xsl:if>
</def>

<def name="direct">
  <assure-state/>
  <let name="state" select="$state - 1"><yield/></let>
</def>
<def name="postpone">
  <let name="state" select="$state + 1"><yield/></let>
</def>

<xi:include href="#ttoken"><_stop>#ttoken is not found!</_stop></xi:include><!-- !!! -->

<def name="T-WORD">
  <xsl:param name="word" select="." />

  <xsl:choose xmlns:fn="http://www.w3.org/2005/xpath-functions" fn:used="used">
  <xsl:when test="fn:matches($word, '^`\S+')">
    <xsl:value-of select="$word" /><xsl:text> </xsl:text>
    <T-SLIT/>

  </xsl:when>
  <xsl:when test="fn:matches($word, '^-?\d+$')">
    <xsl:value-of select="$word" /><xsl:text> </xsl:text>
    <T-LIT/>

  </xsl:when>
  <xsl:when test="fn:matches($word, '^0x\w+$')">
    <xsl:value-of select="$word" /><xsl:text> </xsl:text>
    <T-LIT/>

  </xsl:when>
  <xsl:otherwise>
    <xsl:text>&#xD;&#xA;`</xsl:text><xsl:value-of select="$word" /><xsl:text> &amp; </xsl:text>
    <T-EXEC/>

  </xsl:otherwise></xsl:choose>
</def>

<def name="T-TEXT">
  <xsl:param name="text" select="."/>

  <xsl:choose><xsl:when test="not( normalize-space($text) )">
    <xsl:text>&#xD;&#xA;</xsl:text>

  </xsl:when><xsl:when test="$state = 0">
    <xsl:if test="starts-with($text, 'BIRTH')"><xsl:text>&#xD;&#xA;</xsl:text></xsl:if>
    <xsl:copy-of select="$text" /><xsl:text> </xsl:text>

  </xsl:when><xsl:otherwise>
    <xsl:analyze-string select="$text" regex="\S+"><xsl:matching-substring>
      <T-WORD/>
    </xsl:matching-substring></xsl:analyze-string>

  </xsl:otherwise></xsl:choose>
</def>

</xi:include>