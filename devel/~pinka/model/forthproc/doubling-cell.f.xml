<?xml version="1.0" encoding="ASCII"?>
<forth xmlns="http://forth.org.ru/ForthML/">

<!--
  XOR AND DUP DROP OVER >R R> UM+
  @ ! B@ B! C@ C!
  0< /CELL /CHAR  LSHIFT  RSHIFT
  /CELL-DEGREE /CHAR-DEGREE
  EXECUTE
  SP@ SP! RP@ RP!
-->

<wordlist name="doubling-hidden">

<def name="(DLSHIFT)" ds=" d1 u -- d2 ">
  <rem> ( lo hi  u ) </rem>
  TUCK LSHIFT >R 
  2DUP NEGATE 32 + RSHIFT >R
  LSHIFT 2R> OR
</def>
<def name="DLSHIFT" ds=" d1 u -- d2 ">
  DUP <unless> DROP <exit/></unless>
  DUP 63 UGT <if> DROP 2DROP 0. <exit/></if>
  DUP 31 UGT <if> NIP 32 - LSHIFT 0 SWAP <exit/></if>
  (DLSHIFT) 
</def>
<def name="(DRSHIFT)" ds=" d1 u -- d2 ">
  <rem> ( lo hi  u ) </rem>
  2DUP RSHIFT >R
  TUCK NEGATE 32 + LSHIFT >R
  RSHIFT R> OR R>
</def>
<def name="DRSHIFT" ds=" d1 u -- d2 ">
  DUP <unless> DROP <exit/></unless>
  DUP 63 UGT <if> DROP 2DROP 0. <exit/></if>
  DUP 31 UGT <if> >R NIP R> 32 - RSHIFT 0 <exit/></if>
  (DRSHIFT) 
</def>

<def name="LOG2" ds=" x -- u ">
  0 >R <repeat> 1 RSHIFT DUP <while/> RP@ 1+! </repeat> DROP R>
</def>

<export>

<def name="/CELL-DEGREE">
  <lit> 2 CELLS  LOG2 </lit> 0
</def>
  
<def name="/CHAR-DEGREE">
  <lit> 1 CHARS  LOG2 </lit> 0
</def>

<def name="ALIGNED"> >R DUP 0x3F AND <if> 0x40 + 0xFFFFFFC0 AND </if> R> </def>

<def name="LSHIFT"> DROP DLSHIFT </def>
<def name="RSHIFT"> DROP DRSHIFT </def>

<def name="/CHAR"> 1. </def>
<def name="/CELL"> 2 CELLS 0 </def>

<def name="W@"> DROP W@ 0   </def>
<def name="W!"> DROP NIP W! </def>

<def name="T@"> DROP @ 0   </def>
<def name="T!"> DROP NIP ! </def>

<def name="@"> DROP 2@ </def>
<def name="!"> DROP 2! </def>

<def name="B@"> DROP  B@ 0 </def>
<def name="B!"> DROP NIP B! </def>

<def name="C@"> B@ </def>
<def name="C!"> B! </def>

<!-- It is involve an endianness-sensitive solution!
 For example, 65 SP@ C@ does't give 65 but 0.
-->


<!--
<def name="EXECUTE"> DROP EXECUTE </def>
-->

<def name="SP@"> SP@ 0 </def>
<def name="SP!"> DROP SP! </def>
<def name="RP@"> 2R> RP@ 0 2SWAP 2>R </def>
<def name="RP!"> 2R> 2SWAP DROP RP! 2>R </def>

<def name="0LT"> 0. D&lt; DUP </def>

<def name="XOR" ds=" lo1 hi1 lo2 hi2 -- lo3 hi3 "> SWAP >R XOR SWAP R> XOR SWAP </def>
<def name="AND" ds=" lo1 hi1 lo2 hi2 -- lo3 hi3 "> SWAP >R AND SWAP R> AND SWAP </def>
<def name="DUP" ds=" lo1 hi1 -- lo1 hi1 lo1 hi1 "> 2DUP </def>
<def name="DROP" ds=" lo1 hi1 -- "> 2DROP </def>
<def name="OVER" ds=" lo1 hi1 lo2 hi2 -- lo1 hi1 lo2 hi2 lo1 hi1 "> 2OVER </def>

<def name=">R"> 2R> 2SWAP 2>R 2>R </def>
<def name="R>"> 2R> 2R> 2SWAP 2>R </def>


<def name="UM+" ds=" lo1 hi1 lo2 hi2 -- lo3 hi3  lo-cy hi-cy">
  <r:direct xmlns:r="http://forth.org.ru/ForthML/Rules/">
    HEX
    <text>
     8B 55 00 01  55 08 13 45  04 8D 6D 08  8D 6D FC 89
     45 00 C7 C0  00 00 00 00  83 D0 00 8D  6D FC 89 45
     00 C7 C0 00  00 00 00 C3
    </text><each-word> forthml-hidden::I-LIT <unless> ABORT </unless> B, </each-word>
    DECIMAL
  </r:direct>
<rem>
  <code name="UDM+" ds=" d1 d2 -- d3 d-cy ">
     MOV EDX, [EBP]
     ADD 8 [EBP], EDX
     ADC EAX, 4 [EBP]
     LEA EBP, 8 [EBP]

     LEA EBP, -4 [EBP]
     MOV [EBP], EAX
     MOV EAX, # 0
     ADC EAX, # 0

     LEA EBP, -4 [EBP]
     MOV [EBP], EAX
     MOV EAX, # 0

     RET
     <rem>not so perfect but good enough ;) </rem>
  </code>
</rem>
</def>

</export></wordlist>

</forth>
