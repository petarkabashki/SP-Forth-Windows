<?xml version="1.0" encoding="windows-1251" ?>
<forth xmlns="http://forth.org.ru/ForthML/">
<!-- 2007 -->
<comment>See also: http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern</comment>

<!-- require list-plain.f.xml -->

<cell name="chain-current"/>
<cell name="chain-context"/>

<cell name="chain-context-node"/>
<cell name="chain-tree-stack"/>

<def name="advice-before" ds=" xt -- ">
  0 , HERE SWAP , chain-current @ BIND-NODE
</def>
<def name="advice-after" ds=" xt -- ">
  0 , HERE SWAP , chain-current @ BIND-NODE-TAIL
</def>

<def name="_perform-node-cond" ds=" i*x node -- j*x flag ">
<rem> see also: list-plain.f.xml/PERFORM-NODE-COND </rem>
  chain-context-node @ >R
  <repeat> DUP <while/> DUP chain-context-node ! @ EXECUTE  DUP 0EQ <while/> 
    DROP chain-context-node @ CELL- @ <rem> CDR -- next node </rem>
  </repeat><!-- ( true|false ) -->
  R> chain-context-node !
</def>
<def name="perform-chain-explicit" ds=" i*x h -- j*x flag ">
  chain-tree-stack   @ >R
  chain-context-node @ >R
  RP@ chain-tree-stack !
  @ _perform-node-cond
  R> chain-context-node !
  R> chain-tree-stack   !
</def>
<def name="perform-chain-next" ds=" i*x -- j*x flag ">
  chain-tree-stack   @ >R
  chain-context-node @
  <repeat>
    CDR _perform-node-cond DUP 0EQ <while/> DROP
    chain-tree-stack @ DUP <while/>
    2@ SWAP chain-tree-stack ! <rem> ( node ) </rem>
  </repeat>
  R> chain-tree-stack !
</def>
<def name="perform-chain" ds=" i*x -- j*x flag ">
  chain-context @ DUP <unless><exit/></unless>
  chain-tree-stack   @ >R
  0  chain-tree-stack ! <rem> cutout </rem>
  @ _perform-node-cond
  R> chain-tree-stack !
</def>
<def name="perform-chain-sure" ds=" i*x -- j*x ">
  perform-chain <if><exit/></if> ABORT
</def>
<comment>
  Цепочки могут неформально сцеплятся через perform-chain-explicit в обработчике,
  что ведет к образованию дерева узлов (но узлы не имеют ссылки на родителя).
  Операция perform-chain-next должна вложенно отработать
  все оставшиеся узлы в порядке обхода дерева, а не только
  текущую цепочку. Для поддержки этой операции, во время обхода все точки ветвления
  сохраняются в список, размещаемый на стеке возвратов. Ячейка
  chain-tree-stack ведет на голову этого списка. При вложенном поиске
  следующего 'успешного' узла этот список последовательно разматывается,
  а после завершения операции — возвращается на место. Разматывать его необходимо для
  исключения бесконечной косвенной рекурсии при вложенных perform-chain-next.

  Теоретически, такая операция неплохо ложится на BacFORTH, но, насколько я понимаю,
  в этом случае использование стека возвратов будет пропорционально общему числу 
  узлов в дереве. А в данном решение оно пропорционально числу ветвлений.
</comment>

</forth>
